(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{368:function(r,e,t){"use strict";t.r(e);var n=t(42),s=Object(n.a)({},(function(){var r=this,e=r.$createElement,t=r._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[t("h1",{attrs:{id:"reactfiber"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reactfiber"}},[r._v("#")]),r._v(" ReactFiber")]),r._v(" "),t("ul",[t("li",[t("strong",[r._v("instance")]),r._v(" 类组件对应实例。")]),r._v(" "),t("li",[t("strong",[r._v("workInProgress")]),r._v(" 树，当前正在调和的 fiber 树 ，一次更新中，React 会自上而下深度遍历子代 fiber ，如果遍历到一个 fiber ，会把当fiber 指向 workInProgress。")]),r._v(" "),t("li",[t("strong",[r._v("current")]),r._v(" 树，在初始化更新中，current = null ，在第一次 fiber 调和之后，会将 workInProgress 树赋值给 current 树。React 来用orkInProgress 和 current 来确保一次更新中，快速构建，并且状态不丢失。")]),r._v(" "),t("li",[t("strong",[r._v("Component")]),r._v(" 就是项目中的 class 组件。")]),r._v(" "),t("li",[t("strong",[r._v("nextProps")]),r._v(" 作为组件在一次更新中新的 props 。")]),r._v(" "),t("li",[t("strong",[r._v("renderExpirationTime")]),r._v(" 作为下一次渲染的过期时间。")])])])}),[],!1,null,null,null);e.default=s.exports}}]);